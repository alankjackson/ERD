---
title: "Prep LA fire data"
author: "Alan Jackson"
format: html
editor: source
---


## Read and prep LA fire data

https://hub-calfire-forestry.hub.arcgis.com/search

retrieved 15 Jan 2025


```{r setup}
library(tidyverse)
library(gt)
library(tidycensus)
library(sf)

googlecrs <- "EPSG:4326"

in_path <- "/home/ajackson/Dropbox/Rprojects/ERD/CA_Fire/Data/"
path <- "/home/ajackson/Dropbox/Rprojects/ERD/CA_Fire/"

#   Read in the shapefiles we created to a simple feature
Eaton <- read_sf(paste0(in_path, "DINS_2025_Eaton_Public_View/",
                        "DINS_2025_Eaton_Public_View.shp"))

summary(Eaton) # check to see what it looks like. Could also do plot(temp)

Eaton <- Eaton %>% 
  mutate(Fire="Eaton") %>% 
  st_transform(googlecrs) # get to a better geoid compatible with Open maps

#   Create a tiny date file with the date for that file

Mydate <- file.info(paste0(in_path, "DINS_2025_Eaton_Public_View/",
                  "DINS_2025_Eaton_Public_View.shp")) %>% select(ctime)
Mydate <- as.character(lubridate::as_date(Mydate$ctime))
saveRDS(Mydate, paste0(path, "Date_string.rds"))


Palisades <- read_sf(paste0(in_path, "DINS_2025_Palisades_Public_View/",
                            "DINS_2025_Palisades_Public_View.shp"))

summary(Palisades) # check to see what it looks like. Could also do plot(temp)

Palisades <- Palisades %>% 
  mutate(Fire="Palisades") %>% 
  st_transform(googlecrs)

#   Read in fire perimeters

Perimeters <- read_sf(paste0(in_path, "CA_Perimeters_NIFC_FIRIS_public_view/",
                             "CA_Perimeters_NIFC_FIRIS_public_view.shp")) %>% 
  filter(stringr::str_detect(incident_n, "Eaton|PALISADES")) %>% 
  st_transform(googlecrs) %>% 
  st_make_valid()

summary(Perimeters)

```

##    Functions

```{r}

options(tigris_use_cache = TRUE)

get_ACS <- function(State, County) {
  # Now let's prepare the block-group data
  
  acs_vars <- c(Pop="B01001_001", # ACS population estimate
                Med_inc="B19013_001", # median household income, blk grp
                Per_cap_inc="B19301_001", # Per capita income, blk grp
                Fam="B17010_001", # Families, blk grp
                Fam_in_poverty="B17010_002", # Families in poverty, blk grp
                Aggreg_inc="B19025_001", # Aggregate household income, blk grp
                Households="B11012_001", # Households, blk grp
                Med_age="B01002_001") # median age, blk grp
  ACS <- get_acs(geography="block group",
                 variables=acs_vars,
                 year=2020,
                 county=County,
                 state=State,
                 output="wide",
                 geometry=TRUE)
  
  ACS <- ACS %>% 
    mutate(Pct_poverty=as.integer(signif(100*Fam_in_povertyE/FamE, 0))) %>% 
    select(GEOID, Pop_acs=PopE, Med_inc=Med_incE, Per_cap_in=Per_cap_incE,
           Fam=FamE, Fam_in_poverty=Fam_in_povertyE, Aggreg_inc=Aggreg_incE,
           Pct_poverty, Households=HouseholdsE, Med_ageE=Med_ageE)
  
  ACS <- sf::st_transform(ACS, googlecrs) %>%  # get to a common geoid
    sf::st_make_valid()
  
  return(ACS)
}

```

###   Clean up fire data

```{r}
df <- bind_rows(Eaton, Palisades)

#   Make factors

df <- df %>% 
  mutate(Building=case_when(
    stringr::str_detect(STRUCTURET, "Residen") ~ "Residence",
    stringr::str_detect(STRUCTURET, "Mobile") ~ "Mobile Home",
    stringr::str_detect(STRUCTURET, "Home") ~ "Mobile Home",
    stringr::str_detect(STRUCTURET, "School") ~ "School",
    stringr::str_detect(STRUCTURET, "Church") ~ "Church",
    stringr::str_detect(STRUCTURET, "Commer") ~ "Commercial",
    .default = "Other"
  ))  %>% 
  mutate(Damage=factor(DAMAGE, levels=c("No Damage", "Affected (1-9%)", "Minor (10-25%)", "Major (26-50%)", "Destroyed (>50%)"))) %>% 
  select(Damage, Structure=STRUCTURET, Fire, Building)

df %>% filter(!Damage=="No Damage") %>% 
  ggplot(aes(x=Building)) +
  geom_bar() +
  facet_wrap(~Fire) +
  coord_flip() +
  labs(title="LA Fires, Current Count of Damaged Structures",
       subtitle="As of Jan 15, 2025 (Other is mostly Utilities)",
       caption="Alan Jackson, 2025")

df %>% 
  ggplot(aes(x=Damage)) +
  geom_bar() +
  facet_wrap(~Fire) +
  coord_flip() +
  labs(title="LA Fires, Current Count of Damaged Structures",
       subtitle="As of Jan 19, 2025 ",
       caption="Alan Jackson, 2025")

Census <- get_ACS('CA', "Los Angeles") %>% 
  replace_na(list(Pct_poverty=0)) %>% 
  filter(Pop_acs>0)

Census <- Census[Perimeters,]


```

#   Plot

```{r}

tmap::tmap_options(basemaps="OpenStreetMap")
  # tmap::tmap_options(basemap.server = c("OpenStreetMap")) # tmap 4.0
  tmap::tmap_mode("view")

My_palette <- c("green", "lightblue", "yellow", "salmon", "red")
  
df %>%  
  sf::st_as_sf() %>% 
  tmap::tm_shape() +
  tmap::tm_dots("Damage", 
                alpha=0.5,
                palette=My_palette,
                popup.vars=c("Damage",
                             "Structure")) + 
  tmap::tm_shape(Perimeters) +
  tmap::tm_polygons(border.col="red", alpha=0) +
  tmap::tm_shape(Census) +
  tmap::tm_polygons(border.col="black", alpha=0.4, palette="-RdYlGn", col="Pct_poverty")
```

##    Save the files

```{r}

saveRDS(df, paste0(path, "Damages.rds"))

saveRDS(Perimeters, paste0(path, "Perimeters.rds"))

# saveRDS(Census, paste0(path, "Census.rds"))



```








