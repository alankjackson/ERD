---
title: "Read FEMA Flood Data"
author: "Alan Jackson"
format: html
editor: source
---

##        Read a Parquet file downloaded from FEMA

https://www.fema.gov/openfema-data-page/fima-nfip-redacted-claims-v2




```{r setup}

library(tidyverse)
library(gt)
library(tidycensus)

pq_path <- "/home/ajackson/Dropbox/Rprojects/ERD/Data/"

#   Expand box by 20% to give a little extra room
expand_box <- function(bbox, pct=0.2){
  Dx <- (bbox[["xmax"]]-bbox[["xmin"]])*pct
  Dy <- (bbox[["ymax"]]-bbox[["ymin"]])*pct
  bbox["xmin"] <- bbox["xmin"] - Dx
  bbox["xmax"] <- bbox["xmax"] + Dx
  bbox["ymin"] <- bbox["ymin"] - Dy
  bbox["ymax"] <- bbox["ymax"] + Dy
  return(bbox)
}
```

##        Set up connection to file and pull out Harris county

```{r}
FEMA <- arrow::open_dataset(paste0(pq_path,"FimaNfipClaims.parquet"))

FEMA_Harris <- FEMA %>% 
  filter(countyCode=="48201") %>% 
  collect()

saveRDS(FEMA_Harris, paste0(pq_path, "FEMA_Harris_Flood.rds"))

```

##        Create an event code

```{r}

Fema_clean <- FEMA_Harris %>% 
  select(dateOfLoss, ratedFloodZone, occupancyType, amountPaidOnBuildingClaim,
         yearOfLoss, buildingDamageAmount, buildingPropertyValue,
         buildingReplacementCost, causeOfDamage, floodEvent, waterDepth,
         floodZoneCurrent, censusTract, censusBlockGroupFips,
         nfipCommunityName, eventDesignationNumber) %>% 
  arrange(dateOfLoss)  
  
# causeOfDamage:
# 0 : Other causes; 
# 1 : Tidal water overflow; 
# : Stream, river, or lake overflow; 
# 3 : Alluvial fan overflow; 
# 4 : Accumulation of rainfall or snowmelt; 
# 7 : Erosion-demolition; 
# 8 : Erosion-removal; 
# 9 : Earth movement, landslide, land subsidence, sinkholes, etc.


```

##        Look at data

```{r}

foobar <- FEMA_Harris %>%
  filter(censusTract=="48201343700") %>% 
  select(dateOfLoss, ratedFloodZone, occupancyType, amountPaidOnBuildingClaim,
         yearOfLoss, buildingDamageAmount, buildingPropertyValue,
         buildingReplacementCost, causeOfDamage, floodEvent, waterDepth,
         floodZoneCurrent, censusTract, censusBlockGroupFips,
         nfipCommunityName) %>% 
  filter(occupancyType %in% c(1,2,3,11,12,13,14,15))

###   occupancy types
# 1=single family residence; 
# 2 = 2 to 4 unit residential building; 
# 3 = residential building with more than 4 units; 
# 4 = Non-residential building; 
# 6 = Non Residential - Business; 
# 11 = Single-family residential building with the exception of a mobile home or a single residential unit within a multi unit building; 
# 12 = A residential non-condo building with 2, 3, or 4 units seeking insurance on all units; 
# 13 = A residential non-condo building with 5 or more units seeking insurance on all units; 
# 14 = Residential mobile/manufactured home; 
# 15 = Residential condo association seeking coverage on a building with one or more units; 
# 16 = Single residential unit within a multi-unit building; 
# 17 = Non-residential mobile/manufactured home; 
# 18 = A non-residential building; 
# 19 = a non-residential unit within a multi-unit building;

```

##        Combine with census block data

```{r}

#   Get block data for Harris county


census_api_key("c458095036ca1037f97b9c7019b6a7ac2dbf90d4")

#   All these by block group
acs_vars_b <- c(Pop_blk_grp="B01001_001", # Total population by blk grp
              Med_inc="B19013_001", # median household income, blk grp
              Per_cap_inc="B19301_001", # Per capita income, blk grp
              Aggreg_inc="B19025_001", # Aggregate household income, blk grp
              Households="B11012_001", # Households, blk grp
              Med_age="B01002_001") # median age, blk grp

ACS_b <- get_acs(geography="block group",
               variables=acs_vars_b,
               year=2020,
               state="TX",
               county="201",
               output="wide",
               geometry=TRUE) 

Sum_per_blk <- FEMA_Harris %>% 
    select(dateOfLoss, ratedFloodZone, occupancyType, amountPaidOnBuildingClaim,
         yearOfLoss, buildingDamageAmount, buildingPropertyValue,
         buildingReplacementCost, causeOfDamage, floodEvent, waterDepth,
         floodZoneCurrent, censusTract, censusBlockGroupFips,
         nfipCommunityName) %>% 
  filter(occupancyType %in% c(1,2,3,11,12,13,14,15,16)) %>% 
  mutate(Occupancy=case_when(
              occupancyType==1 | occupancyType==11 | occupancyType==15 ~ "Own",
              occupancyType==14 ~ "Mobile",
              .default="Rent"
  )) %>% 
  group_by(censusBlockGroupFips, Occupancy) %>% 
    summarise(Num_Claims=n(),
              Num_dates=n_distinct(dateOfLoss)) %>% 
  ungroup() %>% 
  pivot_wider(names_from = Occupancy, values_from = c(Num_Claims, Num_dates),
              values_fill=0) %>% 
  mutate(Num_Claims=Num_Claims_Own+Num_Claims_Rent,
         Num_dates=Num_dates_Own+Num_dates_Rent)

FEMA_2 <- inner_join(Sum_per_blk, ACS_b, by=join_by("censusBlockGroupFips"=="GEOID")) %>%
  mutate(Claims_percap=Num_Claims/Pop_blk_grpE) %>% 
  filter(Pop_blk_grpE>0) %>% 
  mutate(AvgHouseIncome=Aggreg_incE/HouseholdsE) %>% 
  sf::st_as_sf() %>% 
  sf::st_make_valid()

#   make a diagnostic map

tmap::tmap_options(basemaps="OpenStreetMap")

tmap::tmap_mode("view") # set mode to interactive plots

tmap::tm_shape(FEMA_2 %>% filter(Claims_percap>1)) + 
    #tmap::tm_sf(col="ConvoColor", alpha=0.3) +
  # tmap::tm_fill(col = "Num_Claims", title = "Number of Flood Claims", alpha=0.6, style="pretty")+
  tmap::tm_fill(col = "red", title = "Flood Claims per capita", alpha=0.6, style="pretty")+
  tmap::tm_borders(lwd=0.1) 

```

##        Stats for each block

```{r}

FreqFliers <- FEMA_2 %>% 
  filter(Claims_percap>1) %>% 
  select(censusBlockGroupFips, Pop_blk_grpE, Per_cap_incE,
         HouseholdsE, AvgHouseIncome,
         Num_Claims, Num_Claims_Own, Num_Claims_Rent) %>% 
  sf::st_drop_geometry() %>% 
   arrange(censusBlockGroupFips) %>% 
  mutate(Label=paste("Harris", LETTERS[row_number()]))

Frequent <- Fema_clean %>% 
  filter(censusBlockGroupFips %in% FreqFliers$censusBlockGroupFips) %>% 
  left_join(FreqFliers, by="censusBlockGroupFips")

#   Table and Plots of interesting blocks in county

Summary_table <- FreqFliers %>% 
   arrange(censusBlockGroupFips) %>% 
  select(censusBlockGroupFips, Label, Pop_blk_grpE, HouseholdsE,
         Num_Claims_Own, Num_Claims_Rent, AvgHouseIncome) %>% 
  gt() %>%     
  gt::tab_header(
      title="Multiple Flood Event Census Blockgroups",
      subtitle=paste("Harris County, >1 event per capita")
    ) %>% 
    cols_label(
      censusBlockGroupFips="BlkGrp",
      Label="Label",
      Pop_blk_grpE="Pop",
      HouseholdsE="# Households",
      # Num_Claims_Own="Owner Claims",
      # Num_Claims_Rent="Renter Claims",
      Num_Claims_Own="Owner",
      Num_Claims_Rent="Renter",
      AvgHouseIncome="Household Income"
    ) %>% 
    fmt_currency(AvgHouseIncome, decimals=0) %>% 
    tab_spanner(
      label="Claims",
      columns=c(Num_Claims_Own, Num_Claims_Rent)
    ) %>% 
    tab_footnote(
      footnote=md("*2020 census data*")
    )

#   Index map of frequent flier blkgrps

box <- FEMA_2 %>%
    sf::st_bbox() %>% expand_box(., 0.2)
  
  Base_basemapR <- basemapR::base_map(box, basemap="mapnik", increase_zoom=2)
  
 Index_map <- FEMA_2 %>% 
   inner_join(., FreqFliers, by="censusBlockGroupFips") %>% 
   arrange(censusBlockGroupFips) %>% 
   sf::st_as_sf() %>% 
    ggplot() +
    Base_basemapR +
   geom_sf(color="red")+
    # ggsflabel::geom_sf_label_repel(aes(label=paste(Label)),
    #                                 size=2, max.overlaps=20, force=100) +
    # geom_sf_label_repel(aes(label = paste(Label)),
    #                     force = 100, nudge_x = -2, seed = 10) +
   ggrepel::geom_label_repel(
    aes(label = paste(Label), geometry = geometry),
    stat = "sf_coordinates",
    min.segment.length = 0
  ) +
    labs(title=paste("Census Blkgrps in Harris County with >1 FEMA Claim per capita"),
         x="Longitude",
         y="Latitude") +
    coord_sf(xlim=c(box$xmin, box$xmax),c(box$ymin, box$ymax)) 
  
 gridExtra::grid.arrange(grobs=list(Index_map, cowplot::as_grob(Summary_table)), 
                         nrow=1, top="Harris County")
  # ggsave(paste0(output_path, "Cat_",i,"_slosh_model.jpg")) 

#   Make plots for each block

# for (i in FreqFliers$censusBlockGroupFips){
  
  Label <- Frequent$Label[1]
  
  Claims <- Frequent %>% 
    filter(censusBlockGroupFips %in% i) %>% 
    group_by(yearOfLoss) %>% 
      summarise(Claims=n())
  
  #   Flood events per year barchart
  
  Claims %>% ggplot(aes(x=yearOfLoss, y=Claims)) +
    geom_bar(stat="identity") +
    labs(
      title=paste("Flood Events by Year"),
      subtitle=paste("Census Blkgrp", i, Label),
      x="Year of Loss",
      y="Number of Claims"
    )
  
  #   Table of Claims and event names and year
  
  MyTable <- 
  Claims <- Frequent %>% 
    filter(censusBlockGroupFips %in% i) %>% 
    group_by(floodEvent, yearOfLoss) %>% 
      summarise(Claims=n()) %>% 
    mutate(floodEvent=ifelse(is.na(floodEvent), "No Name", floodEvent))
  
  MyTable %>% 
    arrange(yearOfLoss) %>% 
    relocate(yearOfLoss, floodEvent, Claims) %>% 
    ungroup() %>% 
    filter(Claims>9) %>% 
    gt() %>% 
    gt::tab_header(
      title="Large Flood Events ( >9 claims)",
      subtitle=paste("Census Blkgrp", i, Label)
    ) %>% 
    cols_label(
      yearOfLoss="Year",
      floodEvent="Event Name",
      Claims="Num of Claims"
    ) %>% 
    tab_footnote(
      footnote="FEMA data combined with 2020 census"
    )
    
  #   Plot flood inches distribution
  
  Frequent %>% 
    filter(censusBlockGroupFips %in% i) %>% 
    ggplot(aes(x=waterDepth)) + 
    geom_histogram() +
    labs(
      title=paste("Water Depths for Claims in Inches"),
      subtitle=paste("Census Blkgrp", i, Label),
      x="Inches of Water",
      y="Number of Claims"
    )
    
# Map of blkgrp
  

tmap::tmap_mode("view") # set mode to interactive plots
tmap::tmap_options(basemaps="OpenStreetMap")

tmap::tm_shape(FEMA_2 %>% filter(censusBlockGroupFips %in% i)) + 
  tmap::tm_fill(col = "red", title = paste("Blkgrp", i, Label), alpha=0.2, style="pretty")+
  tmap::tm_borders(lwd=0.1) 
# }

#     Map of tracts

Fema_clean %>% 
  group_by(censusBlockGroupFips) %>% 
    summarise(Num_Claims=n(),
              Num_dates=n_distinct(dateOfLoss)) %>% 
  ungroup() #%>% 
  pivot_wider(names_from = Occupancy, values_from = c(Num_Claims, Num_dates),
              values_fill=0) %>% 
  mutate(Num_Claims=Num_Claims_Own+Num_Claims_Rent,
         Num_dates=Num_dates_Own+Num_dates_Rent)

```

```{r}
#     Misc stuff

Fema_clean %>% 
  mutate(amountPaidOnBuildingClaim=replace_na(amountPaidOnBuildingClaim, 0),
         amountPaidOnContentsClaim=replace_na(amountPaidOnContentsClaim, 0),
         buildingDamageAmount=replace_na(buildingDamageAmount, 0),
         contentsDamageAmount=replace_na(contentsDamageAmount, 0)) %>% 
  mutate(PctPaid=100*(amountPaidOnBuildingClaim + amountPaidOnContentsClaim)/
                 (buildingDamageAmount + contentsDamageAmount)) %>% 
  select(PctPaid) %>% 
  filter(PctPaid<200) %>% 
  filter(!is.nan(PctPaid)) %>% 
  ggplot(aes(x=PctPaid))+
  geom_histogram(binwidth=10)


Fema_clean %>% 
  mutate(amountPaidOnBuildingClaim=replace_na(amountPaidOnBuildingClaim, 0),
         amountPaidOnContentsClaim=replace_na(amountPaidOnContentsClaim, 0),
         buildingDamageAmount=replace_na(buildingDamageAmount, 0),
         contentsDamageAmount=replace_na(contentsDamageAmount, 0)) %>% 
  mutate(PctPaid=(amountPaidOnBuildingClaim + amountPaidOnContentsClaim)-
                 (buildingDamageAmount + contentsDamageAmount)) %>% 
  select(PctPaid) %>% 
  filter(!is.nan(PctPaid)) %>% 
  filter(between(PctPaid, -2000, 2000)) %>% 
  ggplot(aes(x=PctPaid))+
  geom_histogram()+
  labs(x="Paid - Damages")


```

##        FEMA Ike payouts

```{r}

Ike_claims <- 
Fema_clean %>% 
  filter(floodEvent=="Hurricane Ike") %>% 
  group_by(censusBlockGroupFips) %>% 
    summarise(Num_Claims=n(),
              Num_dates=n_distinct(dateOfLoss)) %>% 
  ungroup() %>% 
  inner_join(., ACS_b, by=join_by("censusBlockGroupFips"=="GEOID")) %>%
  mutate(Claims_percap=Num_Claims/Pop_blk_grpE) %>% 
  filter(Pop_blk_grpE>0) %>% 
  filter(Num_Claims>100) %>% 
  arrange(-Claims_percap) %>% 
  head(10) %>% 
  mutate(AvgHouseIncome=Aggreg_incE/HouseholdsE) %>% 
  mutate(Label=paste(Num_Claims, "Claims")) %>% 
  sf::st_as_sf() %>% 
  sf::st_make_valid()

#   make a diagnostic map

tmap::tmap_options(basemaps="OpenStreetMap")

tmap::tmap_mode("view") # set mode to interactive plots

tmap::tm_shape(Ike_claims) + 
  tmap::tm_fill(col = "red", title = "Ike Claims per capita", alpha=0.3, style="pretty")+
  tmap::tm_borders(lwd=0.5, col="black") +
  tmap::tm_text("Label", col="black") +
  tmap::tm_layout(title="Top Claims by Percent from Ike")


  Ike_claims %>% 
    select(Num_Claims,Claims_percap, Med_incE, HouseholdsE) %>% 
    relocate(Num_Claims,Claims_percap, Med_incE, HouseholdsE) %>% 
    sf::st_drop_geometry() %>% 
    gt() %>% 
    gt::tab_header(
      title="Top Block Groups for Ike claims",
      subtitle="Top 10 by Claims Per Capita"
    ) %>% 
    cols_label(
      Num_Claims="Number of Claims",
      Claims_percap="Claims per Cap",
      Med_incE="Median Income",
      HouseholdsE="Num Households"
    ) %>% 
    fmt_number(Claims_percap, decimals=2) %>% 
    fmt_currency(Med_incE, decimals=0) %>% 
    tab_footnote(
      footnote="FEMA data combined with 2020 census"
    )
```


