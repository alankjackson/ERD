---
title: "Sea Level Rise to Census"
author: "Alan Jackson"
format: html
editor: source
---


##        NOAA data

download from https://coast.noaa.gov/slrdata/Depth_Rasters/index.html

Used wget with the convenient URL file NOAA provides to download all
the geotiff files for the Gulf coast and the Atlantic coast.

Most states conveniently include a text file of the counties included, 
which can be used as input to wget, as in:

wget --input-file=URLlist_SC.txt 

Note that the county list for Louisiana is incomplete.


```{r setup}

library(tidyverse)
library(tidycensus)
library(stringr)
library(tmap)
library(terra)

options(tigris_use_cache = TRUE)

googlecrs <- "EPSG:4326"
NAD83crs <- "EPSG:4269"

path <- "/home/ajackson/Dropbox/Rprojects/ERD/SeaLevel/"
Curated_path <- "/home/ajackson/Dropbox/Rprojects/Curated_Data_Files/"
mirror <- "/home/ajackson/Dropbox/mirrors/ajackson/ERD/"
bigpath <- "/media/ajackson/extradrive1/SeaLevel/"

############    function

#   This function takes the 10 meter resolution inundation files
#   and converts them to 50 meter resolution - a 25:1 compaction.
#   I use the median value of water depth as that will be less
#   sensitive to the data not having a gaussian distribution.

Prep_tif <- function(filename) {
  #   File is too big - blows up PC memory
  
  df_tif <- terra::aggregate(terra::rast(filename), 
                           fact=5, fun="median", na.rm=TRUE)
  
  #   Get rid of flags
  df_tif <- terra::ifel(df_tif > 9, NA, df_tif)
  #   convert depths to feet
  df_tif <- df_tif*3.28084
  
  return(df_tif)
} ###########   end function Prep_tif

    # This function takes the census block polygons and intersects
    # them with the raster files. Output is number of cells with
    # a value, indicating flooding, number of null cells, weighted
    # mean of water depth values, weighted sum of those values,
    # and the sum of the weights. Also the max, min, and sigma
    
Intersect_blocks <- function(df_tif, Blocks_trim) {
  #   Get intersecting blocks
  val_by_block2 <- exactextractr::exact_extract(
                       x=df_tif,
                       y=Blocks_trim,
                       max_cells_in_memory=8e+07,
                       include_cols=c("GEOID")) %>% 
                   dplyr::bind_rows() %>%
                   tibble::as_tibble()
  
  #   Collapse data down to block level
  Stats_by_block <- val_by_block2 %>% 
    group_by(GEOID) %>% 
      summarize(Wmean=stats::weighted.mean(value, coverage_fraction, na.rm=TRUE),
                Wvaluesum=sum(value*coverage_fraction, na.rm=TRUE),
                Weights=sum(coverage_fraction, na.rm=TRUE),
                Num=sum(!is.na(value)),
                NumNA=sum(is.na(value)),
                Max=max(value, na.rm=TRUE),
                Min=min(value, na.rm=TRUE),
                Sigma=sd(value, na.rm=TRUE)
      ) %>% 
    filter(Num>0)
  
  #   Join Blocks to stats
  
  Stat_blocks <- inner_join(Blocks_trim, Stats_by_block, by="GEOID")
  
  return(Stat_blocks)
}  ########   end of function Intersect_blocks

```

##        get census blocks

Note: the grids are in EPSG:4269
Census polygons are NAD83, EPSG:4269

```{r}
State <- "MA"
# Get blocks for State

#     P16_002N  !!Total:!!Family households:
#     P16_007N !!Total:!!Nonfamily households:

Counties_AL <-  c("Mobile", "Washington", "Clarke", "Monroe", "Baldwin")
Counties_FL <- NULL #   All the counties
Counties_TX <- c("Calhoun", "Jackson", "Matagorda", "Victoria",
"Hardin", "Jasper", "Jefferson", "Newton", "Orange",
"Brazoria", "Chambers", "Galveston", "Harris county", "Liberty",
"Aransas", "Nueces", "Refugio", "San Patricio",
"Cameron", "Kenedy", "Kleberg", "Willacy")
Counties_LA <- c("Acadia", "Iberia", "Lafayette", "St. Martin", "St. Mary", "Vermilion", "Jefferson", "Orleans", "Plaquemines", "St. Bernard", "St. Charles", "St. John the Baptist",  "Ascension", "East Baton Rouge", "Iberville", "Jefferson", "Livingston", "Orleans", "St. Charles", "St. James", "St. Tammany", "Tangipahoa", "West Feliciana", "Allen", "Beauregard", "Calcasieu", "Cameron", "Jefferson Davis",
"Lafourche", "Terrebonne" )
Counties_NC <- c("Brunswick", "New Hanover", "Pender", "Onslow", "Carteret", "Craven", "Pamlico", "Beaufort", "Hyde", "Dare", "Tyrrell", "Washington", "Bertie", "Hertford", "Gates", "Chowan", "Perquimans", "Pasquotank", "Camden", "Currituck", "Pitt", "Jones", "Martin")
Counties_LA <- NULL # list is incomplete
# Counties_NC <- NULL # No list given
Counties_VA <- NULL # No list given
Counties_DC <- NULL # No list given
Counties_MD <- NULL # No list given
Counties_DE <- NULL # No list given
Counties_ME <- c("Hancock", "Penobscot", "Waldo", "Washington", "Cumberland", "Kennebec", "Knox", "Lincoln", "Sagadahoc", "York")
Counties_NY <- c("Suffolk", "Nassau", "New York", "Westchester", "Rockland")
Counties_RI <- c("Bristol", "Kent", "Newport", "Providence", "Washington")
Counties_CT <- c("Fairfield", "Hartford", "Middlesex", "New Haven", "New London")
Counties_MS <- c("Hancock", "Harrison", "Jackson")
Counties_NH <- c("Rockingham", "Strafford")
Counties_GA <- c("Bryan", "Chatham", "Effingham", "Liberty", "Long", "McIntosh", "Brantley", "Camden", "Charlton", "Glynn", "Wayne")
Counties_SC <- c("Charleston", "Berkeley", "Dorchester", "Georgetown", "Williamsburg", "Horry", "Florence", "Marion", "Beaufort", "Colleton", "Jasper")
Counties_NJ <- c("Burlington", "Mercer", "Monmouth", "Ocean", "Bergen", "Essex", "Hudson", "Middlesex", "Passaic", "Somerset", "Union", "Atlantic", "Camden", "Cape May", "Cumberland", "Gloucester", "Salem")
Counties_PA <- c("Bucks", "Delaware", "Montgomery", "Philadelphia")
Counties_MA <- c("Barnstable", "Bristol", "Dukes", "Essex", "Middlesex", "Nantucket", "Plymouth", "Suffolk", "Norfolk") 

#   Fill counties variable with proper stuff
Counties=eval(parse(text=paste0("Counties_", State)))

Blocks <- get_decennial(geography="block",
                        variables=c("P1_001N", "P16_002N", "P16_007N"),
                        sumfile="dhc",
                        year=2020,
                        state=State,
                        county=Counties,
                        geometry=TRUE,
                        output="wide") %>% 
  select(GEOID, NAME, Pop_blk = P1_001N, 
                      Fam_house_blk = P16_002N, 
                      NonFam_house_blk = P16_007N)
```

#       Compact geotiffs

Compress geotifs by reducing the resolution by a factor of 5, reducing file
size by a factor of 25. This will leave them with a resolution of 50 meters.



```{r}
#   Run function for each geotif

infiles <- list.files(path=bigpath, pattern=paste0("^",State,"_.*ft\\.tif$")) 

t1 <- proc.time()
i <- 0
deltaTs <- rep(NA, 10)

for (file in infiles) {
  t2 <- proc.time()
  deltaTs[i%%10+1] <- t2[3] - t1[3]
  print(paste(file, "------", length(infiles)-i, "Time remaining =",
        signif((length(infiles)-i)*mean(deltaTs, na.rm=TRUE, trim=0.2)/60, 3), "minutes"))
print(t2-t1)
  t1 <- t2
  i <-  i + 1
  
  #   Read in geotiff, reduce by factor of 25, and output
  
  print("Prep Tif")
  df_tif <- Prep_tif(paste0(bigpath, file))
  
  terra::writeRaster(df_tif, paste0(bigpath, file, "_small.tif"))
  
  terra::tmpFiles(remove=TRUE) # do some cleanup
  
  #   Free memory
  
  gc()

}
```

##        Intersect blocks and geotifs

Intersect census block polygons and rasters, calculating a variety of
useful statistics. Also store the name of the raster file that was
used, so that it can be walked back later.

```{r}

All_stats=NULL
area_flag <- "None" # this will tell when we encounter a new area
infiles <- list.files(path=bigpath, pattern=paste0("^",State,"_.*small*")) 
t1 <- proc.time()
i <- 0
deltaTs <- rep(NA, 10)
#     Read in each raster file and intersect with the block polygons
for (file in infiles) {

  t2 <- proc.time()
  deltaTs[i%%10+1] <- t2[3] - t1[3]
  print(paste(file, "------", length(infiles)-i, "Time remaining =",
        signif((length(infiles)-i)*mean(deltaTs, na.rm=TRUE, trim=0.2)/60, 3), "minutes"))
print(t2-t1)
  t1 <- t2
  i <-  i + 1
  area <- str_extract(file, "^\\w*_slr")
  depth <- str_replace(str_extract(file, "\\d_\\d|\\d+"), "_", ".")
  
  df_tif <- terra::rast(paste0(bigpath, file))

  #     Pull out only blocks that intersect the spatraster, but only
  #     when the raster area has changed
  
  if (area_flag != area) {
    print("Trim")
    terra::gdalCache(size = 10000)
    foo <- prioritizr::intersecting_units(Blocks, df_tif)
    Blocks_trim <- Blocks[foo,]
    area_flag <- area
  }
  Blocks_trim <- Blocks_trim %>% 
    mutate(Raster=file) # Add raster name that was used

  #   Intersect blocks with raster and calculate various summary stats 
  
  print("Intersection and summary")
  Block_stats <- Intersect_blocks(df_tif, Blocks_trim) 
  Block_stats <- Block_stats %>% mutate(Depth=depth) # store depth from filename
  
  #   Accumulate results
  
  All_stats <- bind_rows(All_stats, Block_stats)
  
}

saveRDS(All_stats, paste0(path, "All_stats_", State,".rds"))
  
```


##        Do some consolidation and cleanup at block level

```{r}

All_stats <- readRDS(paste0(path, "All_stats_", State,".rds"))

All_stats2 <- All_stats %>% 
  # mutate(Depth=as.numeric(Depth)) %>% 
  filter(Pop_blk>0) #   don't care if no one lives there

All_stats2 %>% filter(Pop_blk<100) %>% 
  ggplot() + geom_histogram(aes(x=Pop_blk))

#   Combine records with identical block GEOID's

foo <- All_stats2 %>% 
  sf::st_drop_geometry() %>% # geometry can be the only difference
  group_by(GEOID, Depth) %>% 
      reframe(NAME=first(NAME),
              Pop_blk=first(Pop_blk),
              Wmean=max(Wmean),
              Wvaluesum=sum(Wvaluesum),
              Weights=sum(Weights),
              Raster=paste(unique(Raster), collapse=","),
              Fam_house_blk=first(Fam_house_blk),
              NonFam_house_blk=first(NonFam_house_blk),
              NumNA=sum(NumNA),
              Num=sum(Num))  

#     And some were found - blocks that get cut by sea level tiles

#     Calculate Block-Groups

foo <- foo %>% 
  mutate(Blk_grp=str_sub(GEOID, 1, 12)) %>% 
  filter(Pop_blk>=25) %>%
  filter(Fam_house_blk>=5) %>%
  mutate(Flood_pct=signif(100*Num/(NumNA+Num),2)) %>% 
  filter(Flood_pct>=5)

#   Calculate some stats by block group 

BG_stats <- foo %>% 
  group_by(Blk_grp, Depth) %>% 
    summarise(T_pop=sum(Pop_blk), # Pop of blocks at risk
              T_Fam_house=sum(Fam_house_blk),
              T_NonFam_house=sum(NonFam_house_blk),
              T_Num=sum(Num),
              T_NumNA=sum(NumNA),
              Raster=paste(Raster, collapse=","),
              Num_blks=n(),
              Mean_grp=sum(Wvaluesum)/sum(Weights),
              Blocks=list(sort(unique(GEOID)))
              ) %>% 
  mutate(Raster=paste( # clean up filename list
                 unique(
                  unlist(
                   str_split(Raster, pattern=','))), collapse = ","))  

#   Join block group stats to block dataframe and calculate more stuff and filter

All_BG <- left_join(foo, BG_stats, by=c("Depth", "Blk_grp"), 
                  relationship="many-to-one") %>% 
  select(!starts_with("Raster")) %>%
  select(!Blocks) #%>% 
  # filter(Pop_blk>=25) %>%
  # filter(Fam_house_blk>=5) %>%
  # mutate(Flood_pct=signif(100*Num/(NumNA+Num),2)) #%>% 
  # filter(Flood_pct>=5)

#   Final dataset to be saved by block

Block_geom <- All_stats2 %>% 
  filter(Depth=="10") %>% 
  group_by(GEOID) %>% 
    summarise(GEOID=first(GEOID)) %>% 
  ungroup() %>% 
  select(GEOID, geometry)

Block_data <- All_BG %>% 
  mutate(Wmean=signif(Wmean, 1)) %>% 
  select(GEOID, Depth, NAME, Pop_blk, Wmean, Fam_house_blk,
         NonFam_house_blk, Blk_grp, 
         Flood_pct)  

  #   Add geometry

Block_data <- inner_join(Block_data, Block_geom, by=join_by(GEOID),
                         relationship="many-to-one") %>% 
  sf::st_as_sf()

saveRDS(Block_data, paste0(path, "Block_data_", State,".rds"))

# Now let's prepare the block-group data

acs_vars <- c(Pop="B01001_001", # ACS population estimate
              Med_inc="B19013_001", # median household income, blk grp
              Per_cap_inc="B19301_001", # Per capita income, blk grp
              Fam="B17010_001", # Families, blk grp
              Fam_in_poverty="B17010_002", # Families in poverty, blk grp
              Aggreg_inc="B19025_001", # Aggregate household income, blk grp
              Households="B11012_001", # Households, blk grp
              Med_age="B01002_001") # median age, blk grp
ACS <- get_acs(geography="block group",
               variables=acs_vars,
               year=2020,
               state=State,
               county=Counties,
               output="wide",
               geometry=TRUE) 

ACS <- ACS %>% 
  mutate(Pct_poverty=100*Fam_in_povertyE/FamE) %>% 
  select(GEOID, Pop_acs=PopE, Med_inc=Med_incE, Per_cap_in=Per_cap_incE,
         Fam=FamE, Fam_in_poverty=Fam_in_povertyE, Aggreg_inc=Aggreg_incE,
         Pct_poverty, Households=HouseholdsE, Med_ageE=Med_ageE)

#   Consolidate data by block group

# All_BG2 <- All_BG %>% 
All_BG2 <- BG_stats %>% 
  group_by(Depth, Blk_grp) %>% 
    summarise(Pop_at_risk=first(T_pop),
              Mean_depth=first(Mean_grp),
              Fam_hou_at_risk=first(T_Fam_house),
              Flood_pct=100*first(T_Num)/
                (first(T_Num)+first(T_NumNA)),
              Blocks=list(sort(unique(unlist(Blocks))))
              # Blocks=paste(sort(unique(GEOID)),collapse=", ")
    ) %>% 
  ungroup()

#   Add block group stuff from ACS

All_BG2 <- All_BG2 %>% 
  left_join(., ACS, by=join_by(Blk_grp==GEOID)) %>% 
  mutate(Pct_pop_at_risk=signif(100*Pop_at_risk/Pop_acs, 3)) %>% 
  mutate(Pct_poverty=signif(Pct_poverty, 3)) %>% 
  mutate(Mean_depth=signif(Mean_depth,3)) %>% 
  sf::st_as_sf()
  
saveRDS(All_BG2, paste0(path, "Block_group_data_", State,".rds"))
  
```

##        Make some plots

```{r}

All_BG2 %>% 
  # mutate(Depth=as.numeric(Depth)) %>% 
  filter(as.numeric(Depth)>9.6) %>% 
  ggplot(aes(x=Pct_poverty)) +
  geom_histogram() +
  labs(title="Poverty in Alabama in Census Blocks affected by Sea Level Rise",
       x="Percent in Poverty",
       y="Number of Census Blocks")

All_BG2 %>% 
  # mutate(Depth=as.numeric(Depth)) %>% 
  mutate(Pop_fraction=Pop_at_risk/Pop_acs) %>% #fraction of pop in flooding blocks
  filter(as.numeric(Depth)>9.6) %>% 
  ggplot(aes(x=Pop_fraction)) +
  geom_histogram(bins=20) +
  labs(title="Fraction of Population in Census Blocks affected by Sea Level Rise within a Block Group",
       subtitle="Alabama",
       x="Fraction of block group population in affected blocks",
       y="Number of Census Blocks")


All_BG2 %>% 
  mutate(Depth=as.numeric(Depth)) %>% 
  ggplot(aes(x=Flood_pct)) +
  geom_histogram() +
  facet_wrap(~ Depth, nrow=5) +
  labs(title="Flooding in Alabama at different levels of sea level rise",
       x="Percent of Census Block flooded",
       y="Number of Census Blocks")

All_BG2 %>% 
  mutate(Depth=as.numeric(Depth)) %>% 
  ggplot(aes(x=Flood_pct, y=Pop_acs)) +
  geom_point() +
  facet_wrap(~ Depth, nrow=5) +
  labs(title="Flooding in Alabama at different levels of sea level rise",
       x="Percent of Census Block flooded",
       y="Population of Census Blocks")

All_BG2 %>% 
  mutate(Depth=as.numeric(Depth)) %>% 
  ggplot(aes(x=Flood_pct, y=Pct_poverty)) +
  geom_point() +
  facet_wrap(~ Depth, nrow=5) +
  labs(title="Flooding in Alabama at different levels of sea level rise",
       x="Percent of Census Block flooded",
       y="Percent in Poverty in Census Blocks")







```

```{r}
tmap::tmap_options(basemaps="OpenStreetMap")

tmap::tmap_mode("view") # set mode to interactive plots

tmap::tm_shape(All_stats2 %>% filter(str_starts(GEOID, "010030114191001")) %>% 
                                 filter(Depth=="10")) + 
    #tmap::tm_sf(col="ConvoColor", alpha=0.3) +
  # tmap::tm_fill(title = "Threat", alpha=0.3, style="pretty") +
  tmap::tm_polygons(alpha=0.5,
                    col="Mean",
                    palette = "Blues",
                    colorNA=NULL,
                    title = "10 feet sea level rise",
                    popup.vars=c("NAME",
                                 "Mean",
                                 "Wmean",
                                 "Pop_blk",
                                 "Fam_house_blk")
                    )
```


```{r}


foo3 <- terra::rast(paste0(bigpath, "AL_slr_depth_10ft.tif_small.tif"))

foo3 <- terra::crop(foo3, sf::st_as_sf(Block_data))

# tmap::tmap_options(basemaps="OpenStreetMap")
tmap_options(basemap.server = c("OpenStreetMap"))

tmap::tmap_mode("view") # set mode to interactive plots

tmap::tm_shape(foo3) +
  tmap::tm_raster(col_alpha=0.5,
                  col.scale = tm_scale_categorical(n.max = 4, values = "brewer.blues",
                                                   value.na = "red"),
                  col.legend = tm_legend(title = "AL_slr_10ft"),
                  # col.legend="AL_slr_depth_10ft",
                  # palette = "Blues",
                  value.na=NULL,
                  title = "foo3") +
#  tmap_leaflet(
#   tm_shape(foo3) +
#   tm_raster(alpha = 0.3)
# ) 
  tmap::tm_shape(Block_data %>% filter(Depth=="10")) +
    tmap::tm_polygons(fill_alpha=0.0)
```

