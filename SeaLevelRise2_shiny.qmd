---
title: "SeaLevelRise_shiny"
author: "Alan Jackson"
format: dashboard
server: shiny
editor: source
---


```{r setup}
#| context: setup
### #| include: false

library(tidyverse)
library(stringr)
library(leaflet)

shiny::devmode(TRUE)

googlecrs <- "EPSG:4326"

# path <- "/home/ajackson/Dropbox/Rprojects/TexasDioceseCreationCare/Data/"
# Curated_path <- "/home/ajackson/Dropbox/Rprojects/Curated_Data_Files/"
Curated_path <- "/home/ajackson/Dropbox/Rprojects/ERD/SeaLevel/"

Google_notes <- "https://docs.google.com/document/d/1ZYLhbcxoM2DShvo-eewVF4UHyNHtJVhjPB6KRr6JFI4/edit?usp=sharing"

Local_test <- TRUE

#   Directory where data is stored

DataLocation <- "https://www.ajackson.org/ERD/"

if ( Local_test ) {
  df_grp <- readRDS(paste0(Curated_path, "Block_group_data_AL.rds")) %>% 
    sf::st_as_sf()
  df_blk <- readRDS(paste0(Curated_path, "Block_data_AL.rds")) %>% 
    sf::st_as_sf()
} else {
  # z <- url(paste0(DataLocation, "UCS_sfdata.rds"), method="libcurl")
  df_grp <- readRDS(z)
  close(z)
}

Depths <- as.character((0:20)/2)

States <- c("Alabama", "Florida", "Georgia", "Louisiana", "South Carolina",
            "Texas")
State_abbr <- c("AL", "FL", "GA", "LA", "SC", "TX")

State_df <- as_tibble(cbind(States, State_abbr))

#   Round up to the nearest 5
Max_poverty <- 5*round((max(df_grp$Pct_poverty, na.rm=TRUE)+2.5)/5)

Row_diff <- NULL  # Row deselected from table

```

# {.sidebar}

```{r sidebar}

selectInput('State', 'Choose a state', States, selected="Alabama")

br()

sliderInput('Pct_poverty', '> % in Poverty', 
            min=5, max=Max_poverty,
            value=10, 
            step=5, round=0)
br()

selectInput('Depth', 'Sea Level Rise (ft)', Depths)

br()

#   choose variable to color blocks with
radioButtons("Block_var", "Color Blocks by:",
             c("Population"="Pop_blk",
               "Avg Flood Depth"="Wmean",
               "Households"="Fam_house_blk",
               "% Block Flooded"="Flood_pct"))

#   select a block group and display water depth mode

br()

checkboxInput('Show_water', HTML('<b>Show water depths on mouse click</b>'), value=FALSE)

br()

# 
# checkboxInput('Show_blks', 'Show Blocks on mouse click', value=FALSE)

```

Data from NOAA Sea Level Rise datasets plus the 2020 ACS 
census data.

Note that Percent Poverty applies to those blocks at risk for a given value of
sea level rise - so for small rises in sea level and high poverty values, there
will be no blocks appearing.

Note that the visible data is also shown as a table in the Data tab. Rows
selected in the data table will be highlighted on the map.

[Documentation](https://docs.google.com/document/d/1ZYLhbcxoM2DShvo-eewVF4UHyNHtJVhjPB6KRr6JFI4/edit?usp=sharing)

# Plot

```{r}
# tmapOutput('map')
leafletOutput('map')
```

# Data

```{r}
# tableOutput('data')
DT::dataTableOutput('data')
```


```{r server}
#| context: server
##################################
#####   Load in a new state
##################################

df_grp <- reactive({
    print("============   read in grp data ==============")
  if ( Local_test ) {
    i <- which(State_df$States==input$State)
    #     Read block-group data off disk
  readRDS(paste0(Curated_path,
                 paste0("Block_group_data_",State_df[i,]$State_abbr ,".rds")))
  }
})

df_blk <- reactive({
    print("============   read in blk data ==============")
  if ( Local_test ) {
    i <- which(State_df$States==input$State)
    #     Read block data off disk
  readRDS(paste0(Curated_path,
                 paste0("Block_data_",State_df$State_abbr[i] ,".rds")))
  }
})

Bbox <- reactive({sf::st_bbox(df_blk())})

##################################
#####   Subset data
##################################

dataset_grp <- reactive({
  print("--1--")
  df_grp() %>% filter(Depth==input$Depth) %>%
      filter(Pct_poverty>=input$Pct_poverty)
})

Grp_data <- reactive({
  print("--2--")
  dataset_grp() %>% sf::st_drop_geometry()
})

dataset_blk <- reactive({
  print("--3--")
  df_blk() %>% filter(Depth==input$Depth) %>%
    filter(GEOID %in% unlist(dataset_grp()[["Blocks"]])) 
})

Blk_data <- reactive({
  print("--4--")
  dataset_blk() %>% sf::st_drop_geometry()
})


#####     end subsetting

###################################################################
  #     Debugging tool
  # observeEvent(input$map_shape_click, {
  #     click <- input$map_shape_click
  #     print(paste("--1--", unlist(dataset_grp()[["Blocks"]]))) 
  #     # print(paste("--2--", unlist(dataset_grp()[["Blocks"]]))
  # }) #END OBSERVE EVENT
  # observeEvent(input$data_rows_selected, ignoreNULL = FALSE, {
  #     rows <- input$data_rows_selected
  # observeEvent(rv_table$rows, ignoreNULL = FALSE, {
  #     if (length(rv_table$rows)>0) {
  #     rows <- rv_table$rows
  #     print(paste("--1--", rows))
  #     # print(paste("--2--", unlist(dataset_grp()[["Blocks"]]))
  #     print(paste("--2--", dataset_grp()[rows,][["Blk_grp"]]))
  # 
  #     # if (length(rv_table$rows)>0) {
  #       print(paste("--3--", rv_table$rows))
  #       leafletProxy("map") %>% 
  #         # removeShape(layerId = ~Blk_grp) %>%
  #         addPolylines(data=dataset_grp()[rows,],
  #                      layerId=~Blk_grp,
  #                      weight=4)
  #       print("--4--")
  #     }
  #   else {
  #       print(paste("--5--", rv_table$rows))
  #       leafletProxy("map") %>% 
  #         removeShape(layerId = ~Blk_grp)
  #   }
  #     
  #       
  # }) #END OBSERVE EVENT
    #click on polygon
    observe({ 
        event <- input$map_shape_click
        print(paste("Blk_grp:", event$id))
        print(dataset_grp() %>% filter(Blk_grp=="event$id"))
        
    })
###################################################################

##################################
#       Build map
##################################
    
    #   Build empty master map by state
output$map <- leaflet::renderLeaflet({
  print("--5--")
  leaflet() %>% addTiles() %>%
  fitBounds(Bbox()[["xmin"]], Bbox()[["ymin"]], 
            Bbox()[["xmax"]], Bbox()[["ymax"]])
})
  
  # if (FALSE) { # show water
  # #   Add water grid
  # map <- map %>%
  #   addRasterImage(Crop_tif, colors = pal, opacity = 0.5) %>%
  #   addLegend(pal = pal, values = terra::values(Crop_tif),
  #   title = "Water Depth") 
  # }
  #   Block groups and blocks
  # map <- map %>%

observe({
  print("--6--")
  foo <- dataset_blk()[1,] # trigger a redraw
  #   Reset color scale
  pal <- colorNumeric("YlOrBr",
                      c(input$Pct_poverty, Max_poverty),
                      na.color = "transparent")
  
  leafletProxy("map", data=dataset_grp()) %>% 
    clearShapes() %>%
    clearControls() %>% 
    addPolygons(  # block groups
      group = "Block Grps",
      opacity = 0.8,
      color="black",
      weight = 1,
      fillOpacity = 0.4,
      fillColor = ~pal(Pct_poverty),
      popup = paste(
        "Block Group:", Grp_data()$Blk_grp, "<br>",
        "Pop at risk:", Grp_data()$Pop_at_risk, "<br>",
        "Homes at risk:", Grp_data()$Fam_hou_at_risk, "<br>",
        "Avg flood depth (ft):", Grp_data()$Mean_depth, "<br>",
        "% in poverty:", Grp_data()$Pct_poverty
        )
    ) %>% 
    addLegend(
      position = "topright",
      pal=pal,
      values = ~Pct_poverty,
      title="% Poverty"
    )
})
observe({
  print("--7--")
  
  pal <- colorNumeric("Purples",
                      c(min(Blk_data()[[input$Block_var]]),
                      max(Blk_data()[[input$Block_var]])),
                      na.color = "transparent")
  
  print(paste("--7.1--", input$Block_var))
  print(paste("--7.2--", Blk_data()[[input$Block_var]]))
  
  leafletProxy("map", data=dataset_blk()) %>% 
    removeControl("Blocks") %>%
    addPolygons( #      Blocks
    group = "Blocks",
    color = "purple",
    opacity = 1,
    weight = 1,
    fillOpacity = 0.4,
    fillColor = ~pal(Blk_data()[[input$Block_var]]),
    popup = paste(
      "Block Name:", Blk_data()$NAME, "<br>",
      "Population:", Blk_data()$Pop_blk, "<br>",
      "Households:", Blk_data()$Fam_house_blk, "<br>",
      "Average Water Depth:", Blk_data()$Wmean, "<br>",
      "Pct of Block flooded:", Blk_data()$Flood_pct
  ))  %>% 
    addLegend(
      position = "bottomright",
      pal=pal,
      values = Blk_data()[[input$Block_var]],
      layerId = "Blocks",
      title=input$Block_var
    )
})
observe({
  print("--8--")
  # State <- input$State
  leafletProxy("map", data=dataset_blk()) %>% 
    addLayersControl(overlayGroups = c("Block Grps", "Blocks"),
                   options = layersControlOptions(collapsed=F)) #%>%
    # hideGroup("Blocks")
})


#####################
#   Highlight and remove highlights for polygons from table
#####################

observeEvent(Row_list$rows, ignoreNULL = FALSE, {
  print(paste("--9--", Row_list$rows))
    if (Sel()) { # at least one row is selected
  print("--9.1--")
    Row_diff <- setdiff(Row_list$oldrows, Row_list$rows) # find deleted row
  print("--9.1.1--")
    rows <- Row_list$rows
    Row_list$oldrows <- rows
  print("--9.1.2--")
      leafletProxy("map") %>%
        addPolylines(data=dataset_grp()[rows,],
                     color="red",
                     layerId=~Blk_grp,
                     weight=4)
    }
  if (!is.null(Row_diff)){ # a row was unselected
  print("--9.2--")
      leafletProxy("map") %>%
        removeShape(layerId = dataset_grp()[Row_diff,]$Blk_grp)
  }
  if(!Sel() ){ # the final row was unselected
  print("--9.3--")
      leafletProxy("map") %>%
        removeShape(layerId = dataset_grp()[Row_list$oldrows,]$Blk_grp)
  print("--9.4--")
  }


}) #END OBSERVE EVENT

#####################
#   Render the table
#####################
  
output$data <- DT::renderDataTable({
  print("--10--")
  dataset_grp() %>% sf::st_drop_geometry()} %>% 
    select(Blk_grp, Pop_at_risk, Fam_hou_at_risk, Mean_depth, 
           Pct_pop_at_risk, Pct_poverty),
  colnames=c("Block Grp", 
             "Pop at Risk", 
             "Homes at Risk", 
             "Mean flood depth", 
             "% Pop at risk",
             "% Poverty")
)

#############    Table selection controls
Sel <- reactive({!is.null(input$data_rows_selected)}) # is there a selection?
Row_list <-reactiveValues(rows=list()) # what rows are selected?
observeEvent(input$data_rows_selected, ignoreNULL = FALSE, {
    Row_list$rows <- input$data_rows_selected
}) #END OBSERVE EVENT


```
