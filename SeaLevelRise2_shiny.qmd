---
title: "SeaLevelRise_shiny"
author: "Alan Jackson"
format: dashboard
server: shiny
editor: source
---


```{r setup}
#| context: setup
### #| include: false

library(tidyverse)
library(stringr)
# library(tmap)
library(leaflet)

shiny::devmode(TRUE)

googlecrs <- "EPSG:4326"

# path <- "/home/ajackson/Dropbox/Rprojects/TexasDioceseCreationCare/Data/"
# Curated_path <- "/home/ajackson/Dropbox/Rprojects/Curated_Data_Files/"
Curated_path <- "/home/ajackson/Dropbox/Rprojects/ERD/SeaLevel/"

Google_notes <- "https://docs.google.com/document/d/1ZYLhbcxoM2DShvo-eewVF4UHyNHtJVhjPB6KRr6JFI4/edit?usp=sharing"

Local_test <- TRUE

#   Directory where data is stored

DataLocation <- "https://www.ajackson.org/ERD/"

if ( Local_test ) {
  df_grp <- readRDS(paste0(Curated_path, "Block_group_data_AL.rds")) %>% 
    sf::st_as_sf()
  df_blk <- readRDS(paste0(Curated_path, "Block_data_AL.rds")) %>% 
    sf::st_as_sf()
} else {
  # z <- url(paste0(DataLocation, "UCS_sfdata.rds"), method="libcurl")
  df_grp <- readRDS(z)
  close(z)
}

Depths <- as.character((0:20)/2)

States <- c("Alabama", "Florida", "Georgia", "Louisiana", "South Carolina",
            "Texas")
State_abbr <- c("AL", "FL", "GA", "LA", "SC", "TX")

State_df <- as_tibble(cbind(States, State_abbr))

#   Round up to the nearest 5
Max_poverty <- 5*round((max(df_grp$Pct_poverty, na.rm=TRUE)+2.5)/5)

# basemap <- leaflet() %>%
#   # add tiles
#   addProviderTiles("OpenStreetMap")
```

# {.sidebar}

```{r sidebar}

selectInput('State', 'Choose a state', States)

br()

sliderInput('Pct_poverty', '> % in Poverty', 
            min=5, max=Max_poverty,
            value=10, 
            step=5, round=0)
br()

selectInput('Depth', 'Sea Level Rise (ft)', Depths)

br()

#   choose variable to color blocks with
radioButtons("Block_var", "Color Blocks by:",
             c("Population"="Pop_blk",
               "Avg Flood Depth"="Wmean",
               "Households"="Fam_house_blk",
               "% Block Flooded"="Flood_pct"))

#   select a block group and display water depth mode

checkboxInput('Show_water', 'Show water depths on mouse click', value=FALSE)


# 
# checkboxInput('Show_blks', 'Show Blocks on mouse click', value=FALSE)

```

Data from NOAA Sea Level Rise datasets plus the 2020 ACS 
census data.

Note that Percent Poverty applies to those blocks at risk for a given value of
sea level rise - so for small rises in sea level and high poverty values, there
will be no blocks appearing.

Blocks are turned off by default. Use the layer tool in the upper left corner
to control which layer is visible.

Note that the visible data is also shown as a table in the Data tab. Rows
selected in the data table will be highlighted on the map.

[Documentation](https://docs.google.com/document/d/1ZYLhbcxoM2DShvo-eewVF4UHyNHtJVhjPB6KRr6JFI4/edit?usp=sharing)

# Plot

```{r}
# tmapOutput('map')
leafletOutput('map')
```

# Data

```{r}
# tableOutput('data')
DT::dataTableOutput('data')
```

```{r}
# tableOutput('data')
DT::dataTableOutput('datablk')
```

```{r server}
#| context: server
##################################
#####   Load in a new state
##################################

df_grp <- reactive({
    print("============   read in grp data ==============")
  if ( Local_test ) {
    i <- which(State_df$States==input$State)
    #     Read block-group data off disk
  readRDS(paste0(Curated_path,
                 paste0("Block_group_data_",State_df$State_abbr[i] ,".rds")))
  }
})

df_blk <- reactive({
    print("============   read in blk data ==============")
  if ( Local_test ) {
    i <- which(State_df$States==input$State)
    #     Read block data off disk
  readRDS(paste0(Curated_path,
                 paste0("Block_data_",State_df$State_abbr[i] ,".rds")))
  }
})

Bbox <- reactive({sf::st_bbox(df_blk())})

##################################
#####   Subset data
##################################

dataset_grp <- reactive({
  df_grp() %>% filter(Depth==input$Depth) %>%
      filter(Pct_poverty>=input$Pct_poverty)
})

Grp_data <- reactive({
  dataset_grp() %>% sf::st_drop_geometry()
})

dataset_blk <- reactive({
  df_blk() %>% filter(Depth==input$Depth) %>%
    filter(GEOID %in% unlist(dataset_grp()[["Blocks"]])) 
})

Blk_data <- reactive({
  dataset_blk() %>% sf::st_drop_geometry()
})


#####     end subsetting

###################################################################
  #     Debugging tool
  # observeEvent(input$map_shape_click, {
  #     click <- input$map_shape_click
  #     print(paste("--1--", unlist(dataset_grp()[["Blocks"]]))) 
  #     # print(paste("--2--", unlist(dataset_grp()[["Blocks"]]))
  # }) #END OBSERVE EVENT
  # observeEvent(input$data_rows_selected, ignoreNULL = FALSE, {
  #     rows <- input$data_rows_selected
  observeEvent(rv_table$rows, ignoreNULL = FALSE, {
      rows <- rv_table$rows
      print(paste("--1--", rows))
      # print(paste("--2--", unlist(dataset_grp()[["Blocks"]]))
      print(paste("--2--", dataset_grp()[rows,][["Blk_grp"]]))

      if (length(rv_table$rows)>0) {
        leafletProxy("map") %>% 
          removeShape(layerId = ~Blk_grp) %>%
          addPolylines(data=dataset_grp()[rows,],
                       layerId=~Blk_grp,
                       weight=4)
      }
      
        
  }) #END OBSERVE EVENT
    #click on polygon
    observe({ 
        event <- input$map_shape_click
        print(paste("Blk_grp:", event$id))
        print(dataset_grp() %>% filter(Blk_grp=="event$id"))
        
    })
###################################################################

##################################
#       Build map
##################################
    
    #   Build empty master map by state
output$map <- leaflet::renderLeaflet({
  leaflet() %>% addTiles() %>%
  fitBounds(Bbox()[["xmin"]], Bbox()[["ymin"]], 
            Bbox()[["xmax"]], Bbox()[["ymax"]])
})
  
  # if (FALSE) { # show water
  # #   Add water grid
  # map <- map %>%
  #   addRasterImage(Crop_tif, colors = pal, opacity = 0.5) %>%
  #   addLegend(pal = pal, values = terra::values(Crop_tif),
  #   title = "Water Depth") 
  # }
  #   Block groups and blocks
  # map <- map %>%

observe({
  leafletProxy("map", data=dataset_grp()) %>% 
    clearShapes() %>%
    # addTiles() %>% 
    addPolygons(  # block groups
      layerId=~Blk_grp,
      # data = sf::st_transform(dataset_grp(), crs=googlecrs),
      group = "Block Grps",
      opacity = 0.2,
      weight = 1,
      fillOpacity = 0.2,
      popup = paste(
        "Block Group:", Grp_data()$Blk_grp, "<br>",
        "Pop at risk:", Grp_data()$Pop_at_risk, "<br>",
        "Homes at risk:", Grp_data()$Fam_hou_at_risk, "<br>",
        "Avg flood depth (ft):", Grp_data()$Mean_depth, "<br>",
        "% in poverty:", Grp_data()$Pct_poverty
        )
    ) 
})
observe({
  leafletProxy("map", data=dataset_blk()) %>% 
    # clearShapes() %>% 
    # addTiles() %>% 
    addPolygons( #      Blocks
    group = "Blocks",
    color = "purple",
    # opacity = 1,
    weight = 1,
    fillOpacity = 0.2,
    popup = paste(
      "Block Name:", Blk_data()$NAME, "<br>",
      "Population:", Blk_data()$Pop_blk, "<br>",
      "Households:", Blk_data()$Fam_house_blk, "<br>",
      "Average Water Depth:", Blk_data()$Wmean, "<br>",
      "Pct of Block flooded:", Blk_data()$Flood_pct
  )) 
})
observe({
  # State <- input$State
  leafletProxy("map", data=dataset_blk()) %>% 
    addLayersControl(overlayGroups = c("Block Grps", "Blocks"),
                   options = layersControlOptions(collapsed=F)) #%>%
    # hideGroup("Blocks")
})

  # reactive values for map
  # rv_map <-reactiveValues(Clicks=list())
  # 
  # observeEvent(input$map_shape_click, {
  #     click <- input$map_shape_click
  #     # print(paste("--1--",str(click)))
  #     # rv_map$Clicks<-c(rv_map$Clicks, click$id)
  #     # rv_map$Clicks <- stringr::str_extract(rv_map$Clicks, "\\d+$")
  #   if (!input$Show_blks){ # only if in group mode
  #       rv_map$Clicks <- stringr::str_extract(click$id, "\\d+$")
  #       print(paste("--2--", rv_map$Clicks))
  #   }
  # }) #END OBSERVE EVENT

output$datablk <- DT::renderDataTable({
  dataset_blk() %>% sf::st_drop_geometry()} %>% 
    select(GEOID, Depth, Pop_blk, Wmean, 
           Blk_grp),
  colnames=c("Geoid", 
             "Depth", 
             "Pop", 
             "Mean flood depth", 
             "Block Grp")
)

# output$data <- renderTable({
output$data <- DT::renderDataTable({
  dataset_grp() %>% sf::st_drop_geometry()} %>% 
    select(Blk_grp, Pop_at_risk, Fam_hou_at_risk, Mean_depth, 
           Pct_pop_at_risk, Pct_poverty),
  colnames=c("Block Grp", 
             "Pop at Risk", 
             "Homes at Risk", 
             "Mean flood depth", 
             "% Pop at risk",
             "% Poverty")
)

rv_table <-reactiveValues(rows=list())

observeEvent(input$data_rows_selected, ignoreNULL = FALSE, {
    rv_table$rows <- input$data_rows_selected
}) #END OBSERVE EVENT

```
