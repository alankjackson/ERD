---
title: "SeaLevelRise_shiny"
author: "Alan Jackson"
format: dashboard
server: shiny
editor: source
---


```{r setup}
#| context: setup
### #| include: false

library(tidyverse)
library(stringr)
library(leaflet)

############################################
shiny::devmode(TRUE)
options(shiny.fullstacktrace = TRUE)
# options(shiny.minified = TRUE)
############################################

googlecrs <- "EPSG:4326"

# path <- "/home/ajackson/Dropbox/Rprojects/TexasDioceseCreationCare/Data/"
# Curated_path <- "/home/ajackson/Dropbox/Rprojects/Curated_Data_Files/"
Curated_path <- "/home/ajackson/Dropbox/Rprojects/ERD/SeaLevel/Newer/"
Tiff_path <- "/media/ajackson/extradrive1/SeaLevel/Newer/"

Google_notes <- "https://docs.google.com/document/d/1ZYLhbcxoM2DShvo-eewVF4UHyNHtJVhjPB6KRr6JFI4/edit?usp=sharing"

Local_test <- TRUE

#   Directory where data is stored

DataLocation <- "https://www.ajackson.org/ERD/"

if ( Local_test ) {
  df_grp <- readRDS(paste0(Curated_path, "Block_group_data_AL.rds")) 
  df_blk <- readRDS(paste0(Curated_path, "Block_data_AL.rds")) 
} else {
  # z <- url(paste0(DataLocation, "UCS_sfdata.rds"), method="libcurl")
  df_grp <- readRDS(z)
  close(z)
}

Depths <- as.character((0:20)/2)

States <- c("Alabama", "Florida", "Georgia", "Louisiana", "Massachusetts", 
            "Maryland", "Maine", "Mississippi", "North Carolina", 
            "New Hampshire", "New Jersey", "New York", "Pennsylvania", 
            "Rhode Island", "South Carolina", "Texas", "Virginia")
State_abbr <-  c("AL", "FL", "GA", "LA", "MA", "MD", "ME", "MS", "NC", "NH", 
                 "NJ", "NY", "PA", "RI", "SC", "TX", "VA")

State_df <- as_tibble(cbind(States, State_abbr))

# Initial_select <- df_grp %>% 
#       sf::st_drop_geometry() %>% 
#       filter(Depth=="0") %>% 
#       filter(Pct_poverty>=10) %>% 
#       select(Blk_grp, Mean_depth) %>% 
#       arrange(desc(Mean_depth))
# Initial_select <- Initial_select[1,]$Blk_grp

keep_tif <<- "None"

#   Round up to the nearest 5
Max_poverty <<- 5*round((max(df_grp$Pct_poverty, na.rm=TRUE)+2.5)/5)

Row_diff <- NULL  # Row deselected from table

###################################################################
#       Functions
###################################################################

# define js function for opening urls in new tab/window
# https://stackoverflow.com/questions/41426016/shiny-open-multiple-browser-tabs
# js_code <- "
# shinyjs.browseURL = function(url) {
#   window.open(url,'_blank');
# }
# "

Draw_blkgrp <- function(dataset, Grp_data, pal){
  print("---- draw groups")
  leafletProxy("map", data=dataset) %>% 
    clearShapes() %>%
    clearControls() %>%
    addPolygons(  # block groups
      group = "Block Grps",
      layerId = ~Blk_grp,
      opacity = 0.8,
      color="black",
      weight = 1,
      fillOpacity = 0.4,
      fillColor = ~pal(Pct_poverty),
      popup = paste(
        "Block Group:", Grp_data$Blk_grp, "<br>",
        "Pop at risk:", Grp_data$Pop_at_risk, "<br>",
        "Homes at risk:", Grp_data$Fam_hou_at_risk, "<br>",
        "Avg flood depth (ft):", Grp_data$Mean_depth, "<br>",
        "% in poverty:", Grp_data$Pct_poverty
        )
    ) %>% 
    addLegend(
      position = "topright",
      pal=pal,
      values = ~Pct_poverty,
      title="% Poverty"
    )
}

  
Draw_block <- function(dataset, Blk_data, pal, input){
  print("---- draw block")
  leafletProxy("map", data=dataset) %>% 
    # removeControl(~GEOID) %>%
    addPolygons( #      Blocks
    group = "Blocks",
    layerId = ~GEOID,
    color = "purple",
    opacity = 0.5,
    weight = 1,
    fillOpacity = 0.5,
    fillColor = ~pal(Blk_data[[input$Block_var]]),
    popup = paste(
      "Block Name:", Blk_data$NAME, "<br>",
      "Population:", Blk_data$Pop_blk, "<br>",
      "Households:", Blk_data$Fam_house_blk, "<br>",
      "Average Water Depth:", Blk_data$Wmean, "<br>",
      "Pct of Block flooded:", Blk_data$Flood_pct
  ))  %>% 
    addLegend(
      position = "bottomright",
      pal=pal,
      values = Blk_data[[input$Block_var]],
      layerId = ~GEOID,
      title=input$Block_var
    )  
}

Get_tile <- function(Grp_id, Grp_data,  input){
  i <- which(State_df$States==input$State)
  State <- State_df[i,]$State_abbr
  print(paste("Get_tile:", Grp_id, input$State, input$Depth))
  print(Grp_data[Grp_data$Blk_grp==Grp_id,])
  files <- Grp_data %>% 
    filter(Blk_grp==Grp_id) %>% 
    filter(Depth==input$Depth) %>%
    select(Rasters, Blk_grp, Depth) #%>%
    # separate_longer_delim(Rasters, delim=",") %>%
    # mutate(filename=paste0(Rasters, "_slr_depth_",
    #                        str_replace(Depth, "\\,", "_"),
    #                        "ft.tif_small.tif"))
  print(paste("Get_tile file", files[1,]$Rasters))
  files[1,]$Rasters
}

Draw_water <- function(tif, input){
  print("*******draw water****************")
  print(tif)
  center <- input$map_center
  old_zoom <- input$map_zoom
  print(paste("zoom1=", old_zoom, center))
  foo <- leafletProxy("map") %>%
    leafem::addGeotiff(
      file=tif,
      group="Water",
      opacity=0.8,
      autozoom = FALSE,
      colorOptions = leafem::colorOptions(
        palette = "Blues",
        na.color = "transparent"
      )
   ) %>% 
   setView(lng=as.numeric(center[["lng"]]), 
           lat=as.numeric(center[["lat"]]), 
           zoom=as.numeric(old_zoom))
  print(paste("zoom2=", old_zoom, input$zoom, center))
  foo
}

make_URL <- function(MAPID, input){
  
  center <- input$map_center
  zoom <- input$map_zoom
  return(paste0("https://www.google.com/maps/@?api=1&map_action=map&center=",
                center[["lat"]], "%2C1", 
                center[["lng"]], "&zoom=", zoom))
}

```

# {.sidebar}

```{r sidebar}

selectInput('State', 'Choose a state', States, selected="Alabama")

br()

sliderInput('Pct_poverty', '> % in Poverty', 
            min=5, max=Max_poverty,
            value=10, 
            step=5, round=0)
br()

selectInput('Depth', 'Sea Level Rise (ft)', Depths)

br()

#   choose variable to color blocks with
radioButtons("Block_var", "Color Blocks by:",
             c("Population"="Pop_blk",
               "Avg Flood Depth"="Wmean",
               "Households"="Fam_house_blk",
               "% Block Flooded"="Flood_pct"))

#   Open corresponding Google map

br()

# http://www.google.com/maps/place/49.46800006494457,17.11514008755796/@49.46800006494457,17.11514008755796,17z
# https://www.google.com/maps/@?api=1&map_action=map&center=-33.712206%2C150.311941&zoom=12

# set up shiny js to be able to call our browseURL function
# shinyjs::useShinyjs()
# shinyjs::extendShinyjs(text = js_code, functions = 'browseURL')
  
actionButton(
  "Google",
  "Open Google Maps"
)

br()

# checkboxInput('Show_water', HTML('<b>Show water depths on mouse click</b>'), value=FALSE)
# 
# br()

# 
# checkboxInput('Show_blks', 'Show Blocks on mouse click', value=FALSE)

```

Data from NOAA Sea Level Rise datasets plus the 2020 ACS 
census data.

Note that Percent Poverty applies to those blocks at risk for a given value of
sea level rise - so for small rises in sea level and high poverty values, there
will be no blocks appearing.

Note that the visible data is also shown as a table in the Data tab. Rows
selected in the data table will be highlighted on the map.

[Documentation](https://docs.google.com/document/d/1ZYLhbcxoM2DShvo-eewVF4UHyNHtJVhjPB6KRr6JFI4/edit?usp=sharing)

# Plot

```{r}
# tmapOutput('map')
leafletOutput('map')
```

# Data

```{r}
# tableOutput('data')
DT::dataTableOutput('data')
```


```{r server}
#| context: server
##################################
#####   Load in a new state
##################################

df_grp <- reactive({
    print("============   read in grp data ==============")
  print(paste("State=", input$State))
  i <- which(State_df$States==input$State)
  print(paste0("Read in ", "Block_group_data_",State_df[i,]$State_abbr,".rds"))
  if ( Local_test ) {
    #     Read block-group data off disk
    foo <- readRDS(paste0(Curated_path,
                 paste0("Block_group_data_", State_df[i,]$State_abbr,".rds")))
  }
  keep_tif <<- "None"
  foo
})

df_blk <- reactive({
    print("============   read in blk data ==============")
  if ( Local_test ) {
    i <- which(State_df$States==input$State)
    print(paste0("Read in ", "Block_data_", State_df[i,]$State_abbr,".rds"))
    #     Read block data off disk
  foo <- readRDS(paste0(Curated_path,
                 paste0("Block_data_",State_df[i,]$State_abbr,".rds")))
  foo
  }
})

# Bbox <- reactive({sf::st_bbox(df_blk())})

observe({
  print("original map")
  Bbox <- sf::st_bbox(df_grp())
      #   Build empty master map by state
  output$map <- leaflet::renderLeaflet({
    print("--5--")
    leaflet() %>% addTiles() %>%
    fitBounds(Bbox[["xmin"]], Bbox[["ymin"]],
              Bbox[["xmax"]], Bbox[["ymax"]])
  })
  keep_tif <<- "None"
})

##################################
#####   Subset data
##################################

dataset_grp <- reactive({
  # print(paste("--1--", Max_poverty, input$Pct_poverty))
  print(paste("--1--", input$Pct_poverty))
  foo <- df_grp() %>% filter(Depth==input$Depth) %>%
      # filter(Pct_poverty>=min(input$Pct_poverty, Max_poverty-1))
      filter(Pct_poverty>=input$Pct_poverty)
  print(paste("--1.1--", nrow(foo)))
  updateSliderInput(session, "Pct_poverty", #value = 10,
          min = 5, 
          max = max(5*round((max(foo$Pct_poverty, na.rm=TRUE)+2.5)/5),15),
          step = 5)
  foo
})

Grp_data <- reactive({
  print("--2--")
  dataset_grp() %>% sf::st_drop_geometry()
})

dataset_blk <- reactive({
  # foo <- dataset_grp()[1,] # trigger a redraw
  # foo <- input$Pct_poverty
  # print(foo)
  print("--3--")
  # Active_grps <- Grp_data()$Blk_grp
  foo <- df_blk() %>% filter(Blk_grp %in% Grp_data()$Blk_grp) %>% 
                      filter(Depth==input$Depth)
  print(paste("---3.1---", nrow(foo)))
  foo
})

Blk_data <- reactive({
  print("--4--")
  dataset_blk() %>% sf::st_drop_geometry()
})


#####     end subsetting


Select_grp <- reactive({ #    Select a group with mouse
  print("Reactive select group")
                  event <- input$map_shape_click
                  print(paste("Blk_grp:", event$id))
                  event$id
    })

tif <- reactive({ #   get a tile filename
  print("tif reactive")
  if (!is.null(Select_grp())) {
    #   I might have grabbed a block instead, so convert with sub string
    Get_tile(stringr::str_sub(Select_grp(), 1,12), df_grp(), input)
  }
})
###################################################################

##################################
#       Build map
##################################
    
#######################
#     Draw Block Group polys
#######################

# observe({ # clear old polys
#   print("--clear old polys--")
#   input$State # trigger
#   
#   leafletProxy("map") %>% 
#     clearShapes() %>%
#     clearControls()  
# })

observe({
  print("--6--")
  # foo <- dataset_grp()[1,] # trigger a redraw
  #   Reset color scale
  if (nrow(Grp_data())==0) {return()}
  
  pal <- colorNumeric("YlOrBr",
                      # c(5,
                      # max(Grp_data()[["Pct_poverty"]], na.rm=TRUE)),
                      c(input$Pct_poverty, 
                        max(Grp_data()[["Pct_poverty"]], na.rm=TRUE)),
                      na.color = "transparent")
    Draw_blkgrp(dataset_grp(), Grp_data(), pal)
})


#######################
#     Draw Block polys
#######################
observe({
  print("--7--")
  foo <- dataset_grp()[1,] # trigger a redraw
  # foo <- dataset_blk()[1,] # trigger a redraw
  print(paste("Block_var:", input$Block_var))
  if (nrow(Grp_data())==0) {
    print("No grp data")
    return()
  }
  
  pal <- colorNumeric("Greys",
                      c(min(Blk_data()[[input$Block_var]], na.rm=TRUE),
                      max(Blk_data()[[input$Block_var]], na.rm=TRUE)),
                      na.color = "transparent")
  
  print(paste("--7.1--", input$Block_var))
  
    Draw_block(dataset_blk(), Blk_data(), pal, input)
})

#######################
#     add controller for poly layers
#######################
observe({
  print("--8--")
  leafletProxy("map", data=dataset_blk()) %>% 
    addLayersControl(overlayGroups = c("Block Grps", "Blocks", "Water"),
                   options = layersControlOptions(collapsed=F)) 
})


#####################
#   Display water depth
#####################

observe({

  print(paste("tif stuff:", tif(), Tiff_path, length(tif()), keep_tif))
  
  print(tif())
  
  print(paste("---f2---", Hmisc::describe(tif()), tif()))
  print(paste("---f3---", keep_tif))
  
  if (is.null(tif())) { # first pass it is null, but never again
    print("Null tif()")
    keep_tif <<- "Next"
    return()
  }
  
  if (is.na(tif())) { #  nothing foun d
    print("NA tif()")
    keep_tif <<- "Next"
    return()
  }
  
  if (keep_tif == "None") {#  first pass with new state but no grp picked
    print("No water")
    keep_tif <<- "Next"
    return()
  }
  
  if (keep_tif != tif()) {
    keep_tif <<- tif()
    Draw_water(paste0(Tiff_path, tif()), input)
  }

  # if (keep_tif != "None" &
  #     keep_tif != paste0(Tiff_path, tif())) { # has it changed?
  #   keep_tif <<- paste0(Tiff_path, tif()) ###  note global define
  #   # old_state <- input$State
  #   Draw_water(keep_tif) # draw water
  # } else {
  #   print("No water")
  #     keep_tif <<- "Next" 
  #   }

})

#####################
#   Open a google map
#####################

observeEvent(input$Google, {
  center <- input$map_center
  zoom <- input$map_zoom
  print(paste("Google:", center["lat"], center["lng"], zoom))
  url <- paste0("https://www.google.com/maps/@?api=1&map_action=map&center=",
                center["lat"], "%2C", 
                center["lng"], "&zoom=", zoom)
  browseURL(url)
})

#####################
#   Highlight and remove highlights for polygons from table
#####################

observeEvent(Row_list$rows, ignoreNULL = FALSE, {
  print(paste("--9--", Row_list$rows))
      Row_dropped <- NULL
    # if (Sel()) { # at least one row is selected
  # print("--9.1--")
    Row_added <-   setdiff(Row_list$rows, Row_list$oldrows) # find new row
    Row_dropped <- setdiff(Row_list$oldrows, Row_list$rows) # find deleted row
  # print(paste("--9.1.1   add--", Row_added))
  # print(paste("--9.1.11 drop--", Row_dropped))
  # print(paste("--9.1.12--", Row_list$oldrows))
    rows <- Row_list$rows
    Row_list$oldrows <- rows
  # print("--9.1.2--")
    if (Sel()) { # at least one row is selected
  # print(paste0("add high: ", dataset_grp()[Row_added,]$Blk_grp, "_highlight"))
      leafletProxy("map") %>%
        addPolylines(data=dataset_grp()[Row_added,],
                     color="red",
                     layerId=paste0(dataset_grp()[Row_added,]$Blk_grp, "_highlight"),
                     weight=4)
    }
  # print("????")
  if (!is.null(Row_dropped) & length(Row_dropped)>0){ # a row was unselected
  # print("--9.2--")
  # print(paste0("drop high: ", dataset_grp()[Row_dropped,]$Blk_grp, "_highlight"))
      leafletProxy("map") %>%
        removeShape(layerId = paste0(dataset_grp()[Row_dropped,]$Blk_grp,
                                     "_highlight"))
  }
  # print("!!!!")
  if(!Sel() &  !is.null(Row_dropped)){ # the final row was unselected
  # print(paste("--9.3--", Row_list$oldrows))
  # print(paste("--9.4--", dataset_grp()[Row_list$oldrows,]$Blk_grp, "_highlight"))
      leafletProxy("map") %>%
        removeShape(layerId = paste0(dataset_grp()[Row_list$oldrows,]$Blk_grp,
                                     "_highlight"))
  }


}) #END OBSERVE EVENT

#####################
#   Render the table
#####################
  
output$data <- DT::renderDataTable({
  print("--10--")
  dataset_grp() %>% sf::st_drop_geometry()} %>% 
    select(Blk_grp, Pop_at_risk, Fam_hou_at_risk, Mean_depth, 
           Pct_pop_at_risk, Pct_poverty),
  colnames=c("Block Grp", 
             "Pop at Risk", 
             "Homes at Risk", 
             "Mean flood depth", 
             "% Pop at risk",
             "% Poverty")
)

#############    Table selection controls
Sel <- reactive({!is.null(input$data_rows_selected)}) # is there a selection?

Row_list <-reactiveValues(rows=list()) # what rows are selected?

observeEvent(input$data_rows_selected, ignoreNULL = FALSE, {
  # req(input$data_rows_selected)
    Row_list$rows <- input$data_rows_selected
}) #END OBSERVE EVENT


```
 
