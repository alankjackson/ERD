---
title: "SeaLevelRise_testing"
author: "Alan Jackson"
format: html
editor: source
---

##        NOAA data

download from https://coast.noaa.gov/slrdata/Depth_Rasters/index.html



```{r setup}

library(tidyverse)
library(tidycensus)
library(stringr)
library(tmap)

googlecrs <- "EPSG:4326"
NOAAcrs <- "EPSG:4269"

path <- "/home/ajackson/Dropbox/Rprojects/ERD/SeaLevel/"
Curated_path <- "/home/ajackson/Dropbox/Rprojects/Curated_Data_Files/"
mirror <- "/home/ajackson/Dropbox/mirrors/ajackson/ERD/"

infile <- paste0(path, "LA_Delta_slr_depth_0_5ft.tif")

#   File is too big - blows up PC memory

df_tif <- terra::aggregate(terra::rast(infile), 
                         fact=5, fun="median", na.rm=TRUE)
                         # fact=5, fun="max", na.rm=TRUE)
# > df_tif                                  
# class       : SpatRaster 
# dimensions  : 10085, 14341, 1  (nrow, ncol, nlyr)
# resolution  : 0.0001347473, 0.0001347473  (x, y)
# extent      : -90.68977, -88.75735, 28.85413, 30.21306  (xmin, xmax, ymin, ymax)
# coord. ref. : lon/lat NAD83 (EPSG:4269) 
# source(s)   : memory
# name        :       Band_1 
# min value   : 3.576279e-07 
# max value   : 9.964870e+01 

# df_tif <- terra::rast(paste0(path, "LA_Delta_slr_depth_0_5ft.tif")) 

#   Get rid of flags
df_tif2 <- terra::ifel(df_tif > 9, NA, df_tif)

# summary <- terra::summary(df_tif2)

```

##        Intersect grid with census block polygons

Note: the grids are in EPSG:4269
Census polygons are NAD83, EPSG:4269

```{r}

# Get blocks for Louisiana

#     P16_002N  !!Total:!!Family households:
#     P16_007N !!Total:!!Nonfamily households:

Blocks <- get_decennial(geography="block",
                        variables=c("P1_001N", "P16_002N", "P16_007N"),
                        sumfile="dhc",
                        year=2020,
                        state="LA",
                        # county="201",
                        geometry=TRUE,
                        output="wide") %>% 
  rowid_to_column("ID")


#     Pull out only blocks that intersect the spatraster

terra::gdalCache(size = 2000)
foo <- prioritizr::intersecting_units(Blocks, df_tif2)
Blocks_trim <- Blocks[foo,]

# tmap::tmap_options(basemaps="OpenStreetMap")
# 
# tmap::tmap_mode("view") # set mode to interactive plots
# 
# tmap::tm_shape(Blocks_trim) + 
#   # tmap::tm_fill(title = "Threat", alpha=0.3, style="pretty") +
#   tmap::tm_polygons(alpha=0.6,
#                     colorNA=NULL,
#                     title = "0.5 feet sea level rise",
#                     popup.vars=c("P1_001N",
#                                  "NAME"
#                                  )
#                     )

#   Failed - blew out memory
# val_by_block <- terra::extract(df_tif2, 
#                                Blocks,
#                                exact=TRUE)

val_by_block2 <- exactextractr::exact_extract(
                     x=df_tif2,
                     y=Blocks_trim,
                     include_cols=c("ID","P1_001N","P16_002N", "P16_007N")) %>% 
                 dplyr::bind_rows() %>%
                 tibble::as_tibble()


Stats_by_block <- val_by_block2 %>% 
  group_by(ID) %>% 
    summarize(Mean=mean(value, na.rm=TRUE),
              Sum=sum(value, na.rm=TRUE),
              Num=sum(!is.na(value)),
              Pop=first(P1_001N),
              Family_house=first(P16_002N),
              Non_family_house=first(P16_007N)
    ) %>% 
  filter(Num>0)

#   Add ID column to Blocks

# Blocks <- Blocks %>% 
#   rowid_to_column("ID")

#   Join Blocks to stats

Stat_blocks <- inner_join(Blocks, Stats_by_block, by="ID")

#   What does it look like?

tmap::tmap_options(basemaps="OpenStreetMap")

tmap::tmap_mode("view") # set mode to interactive plots

tmap::tm_shape(Stat_blocks) + 
    #tmap::tm_sf(col="ConvoColor", alpha=0.3) +
  # tmap::tm_fill(title = "Threat", alpha=0.3, style="pretty") +
  tmap::tm_polygons(alpha=0.6,
                    col="Mean",
                    palette = "Blues",
                    colorNA=NULL,
                    title = "0.5 feet sea level rise",
                    popup.vars=c("NAME",
                                 "Mean",
                                 "Sum",
                                 "Num")
                    )

  # tm_polygons("Poverty_pct", alpha=0.5, popup.vars=c("Zip", 
  #                                                    "Homes_Risk",
  #                                                    "Homes_ratio"))

```


##        Make a map

```{r}

tmap::tmap_options(basemaps="OpenStreetMap")

tmap::tmap_mode("view") # set mode to interactive plots

tmap::tm_shape(df_tif2) + 
    #tmap::tm_sf(col="ConvoColor", alpha=0.3) +
  # tmap::tm_fill(title = "Threat", alpha=0.3, style="pretty") +
  tmap::tm_raster(alpha=0.3,
                  palette = "Blues",
                  colorNA=NULL,
                  title = "0.5 feet sea level rise")
                  # palette = "-RdYlGn")

```






